{"ast":null,"code":"function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport axios from 'axios';\nvar API = axios.create({\n  baseURL: \"http://localhost:8080/\",\n  responseType: 'json',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\nvar todasEmentas = function todasEmentas() {\n  var dados;\n  return _regeneratorRuntime.async(function todasEmentas$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(API.get(\"/todasEmentas\"));\n\n        case 2:\n          dados = _context.sent;\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar nEmentas = function nEmentas(n) {\n  var dados;\n  return _regeneratorRuntime.async(function nEmentas$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(API.get(\"/nEmentas?numEmentas=\" + n));\n\n        case 2:\n          dados = _context2.sent;\n\n        case 3:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar receita = function receita(receita_str) {\n  var dados;\n  return _regeneratorRuntime.async(function receita$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regeneratorRuntime.awrap(API.get(\"/receita?nomeEmenta=\" + receita_str));\n\n        case 2:\n          dados = _context3.sent;\n\n        case 3:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar mudaPlano = function mudaPlano(jsonStr) {\n  var jsonObj, plano_str, _iterator, _step, obj, nomeEmenta, boolPress, dados;\n\n  return _regeneratorRuntime.async(function mudaPlano$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          jsonObj = JSON.parse(jsonStr);\n          plano_str = \"\";\n\n          for (_iterator = _createForOfIteratorHelperLoose(jsonObj); !(_step = _iterator()).done;) {\n            obj = _step.value;\n            nomeEmenta = obj.ingrediente;\n            boolPress = obj.pressed;\n            plano_str = plano_str + nomeEmenta.replaceAll(\" \", \"+\") + \",\" + boolPress + \";\";\n          }\n\n          _context4.next = 5;\n          return _regeneratorRuntime.awrap(API.get(\"/mudaPlano?nomeEmentasPlano=\" + plano_str));\n\n        case 5:\n          dados = _context4.sent;\n\n        case 6:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default API;","map":{"version":3,"sources":["/home/rubensas/ftp/Hackathon_SEI_22/Frontend/API/api.ts"],"names":["axios","API","create","baseURL","responseType","headers","todasEmentas","get","dados","nEmentas","n","receita","receita_str","mudaPlano","jsonStr","jsonObj","JSON","parse","plano_str","obj","nomeEmenta","ingrediente","boolPress","pressed","replaceAll"],"mappings":";;;;;;;AAgBA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,IAAMC,GAAG,GAAGD,KAAK,CAACE,MAAN,CAAa;AACrBC,EAAAA,OAAO,EAAE,wBADY;AAErBC,EAAAA,YAAY,EAAE,MAFO;AAGrBC,EAAAA,OAAO,EAAE;AACL,oBAAgB;AADX;AAHY,CAAb,CAAZ;;AAQA,IAAMC,YAAY,GAAG,SAAfA,YAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACGL,GAAG,CAACM,GAAJ,CAAQ,eAAR,CADH;;AAAA;AACXC,UAAAA,KADW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAArB;;AAKA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAOC,CAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACOT,GAAG,CAACM,GAAJ,CAAQ,0BAA0BG,CAAlC,CADP;;AAAA;AACPF,UAAAA,KADO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAjB;;AAIA,IAAMG,OAAO,GAAG,SAAVA,OAAU,CAAOC,WAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACQX,GAAG,CAACM,GAAJ,CAAQ,yBAAyBK,WAAjC,CADR;;AAAA;AACNJ,UAAAA,KADM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAhB;;AAKA,IAAMK,SAAS,GAAG,SAAZA,SAAY,CAAOC,OAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEVC,UAAAA,OAFU,GAEAC,IAAI,CAACC,KAAL,CAAWH,OAAX,CAFA;AAIVI,UAAAA,SAJU,GAIW,EAJX;;AAMd,2DAAgBH,OAAhB,iCAAwB;AAAfI,YAAAA,GAAe;AAEhBC,YAAAA,UAFgB,GAEKD,GAAG,CAACE,WAFT;AAGhBC,YAAAA,SAHgB,GAGKH,GAAG,CAACI,OAHT;AAKpBL,YAAAA,SAAS,GAAGA,SAAS,GAAGE,UAAU,CAACI,UAAX,CAAsB,GAAtB,EAA2B,GAA3B,CAAZ,GAA8C,GAA9C,GAAoDF,SAApD,GAAgE,GAA5E;AACH;;AAZa;AAAA,2CAcMrB,GAAG,CAACM,GAAJ,CAAQ,iCAAiCW,SAAzC,CAdN;;AAAA;AAcRV,UAAAA,KAdQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAlB;;AAiBA,eAAeP,GAAf","sourcesContent":["// LIST OF REQUESTS TO BE MADE: http://localhost:8080/\n//\n// Ingrediente = {\"nome\":\"Cebola\",\"quantidade\":1,\"sistemaNumerico\":\"un\"}\n//\n// nEmentas?numEmentas=6\n// Escolhe n ementas do sistema (devolve [nomeEmenta, link foto], [Ingredientes] aka lista de compras) \n//\n// todasEmentas\n// Devolve todas as ementas: [nomeEmenta, link foto]\n//\n// receita?nomeEmenta=bacalhau+com+natas\n// Devolve ementa e seus ingredientes: nomeEmenta, link foto, [Ingredientes]\n//\n// mudaPlano?nomeEmentasPlano=EmpadÃ£o+de+seitan,true;Bacalhau+com+natas,false\n// Devolve novo plano: [nomeEmenta, link foto], [Ingredientes] aka lista de compras\n//\nimport axios from 'axios'\nimport { json } from 'stream/consumers';\n\nconst API = axios.create({\n    baseURL: \"http://localhost:8080/\",\n    responseType: 'json',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n});\n\nconst todasEmentas = async () => {\n    const dados = await API.get(\"/todasEmentas\");\n};\n\n// TODO: ARGUMENTOS\nconst nEmentas = async (n : number) => {\n    const dados = await API.get(\"/nEmentas?numEmentas=\" + n);\n};\n\nconst receita = async (receita_str : string) => {\n    const dados = await API.get(\"/receita?nomeEmenta=\" + receita_str);\n};\n\n// TODO: Quem cria a string?\nconst mudaPlano = async (jsonStr : string) => {\n    // Build string from json: [ {\"ingrediente\": nome, \"pressed\": boolean}, {...} ]\n    let jsonObj = JSON.parse(jsonStr)\n    // Create empty string\n    let plano_str : string = \"\";\n    // Iterate JSON file\n    for (let obj of jsonObj){\n        // Each obj is a {\"ingrediente\": nome, \"pressed\": boolean}\n        let nomeEmenta: string = obj.ingrediente\n        let boolPress: boolean = obj.pressed\n        // Increment string\n        plano_str = plano_str + nomeEmenta.replaceAll(\" \", \"+\") + \",\" + boolPress + \";\";\n    }\n    // Get the data\n    const dados = await API.get(\"/mudaPlano?nomeEmentasPlano=\" + plano_str);\n};\n\nexport default API;"]},"metadata":{},"sourceType":"module"}