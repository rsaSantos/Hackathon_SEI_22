{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useRoute } from '@react-navigation/native';\nimport { useState } from 'react';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Icon } from 'react-native-elements';\nimport API from \"../API/api\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar ingredientes = [{\n  \"ingrediente\": \"ola\",\n  \"pressed\": false\n}, {\n  \"ingrediente\": \"t\",\n  \"pressed\": false\n}];\n\nfunction joinIngrediente(ing) {\n  return {\n    \"ingrediente\": ing.nome + \" \" + ing.quantidade + \" \" + ing.sistemaNumerico,\n    \"pressed\": false\n  };\n}\n\nexport default function Ingredients() {\n  var route = useRoute();\n  var number = route.params.number;\n\n  var request_test = function request_test() {\n    var dados;\n    return _regeneratorRuntime.async(function request_test$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(API.get(\"/nEmentas?numEmentas=\" + number));\n\n          case 2:\n            dados = _context.sent;\n            return _context.abrupt(\"return\", dados.data);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  request_test().then(function (dados) {\n    for (var ing in dados.totalIngredientes) {\n      ingredientes.push(joinIngrediente(ing));\n    }\n  });\n\n  var _useState = useState(ingredientes),\n      _useState2 = _slicedToArray(_useState, 2),\n      items = _useState2[0],\n      setItems = _useState2[1];\n\n  var handleSelectItem = function handleSelectItem(selectedItemIndex) {\n    return setItems(function (old) {\n      return old.map(function (item, index) {\n        if (selectedItemIndex !== index) return item;\n        var pressed = !item.pressed;\n        return _objectSpread(_objectSpread({}, item), {}, {\n          pressed: pressed\n        });\n      });\n    });\n  };\n\n  function showIcon(pressed) {\n    if (pressed) {\n      return _jsx(Icon, {\n        name: \"checkcircle\",\n        size: 40,\n        color: \"black\",\n        type: \"antdesign\"\n      });\n    } else return _jsx(Icon, {\n      name: \"checkcircleo\",\n      size: 40,\n      color: \"black\",\n      type: \"antdesign\"\n    });\n  }\n\n  return _jsxs(View, {\n    style: Styles.container,\n    children: [_jsx(FlatList, {\n      data: items,\n      renderItem: function renderItem(_ref) {\n        var item = _ref.item,\n            index = _ref.index;\n        return _jsxs(View, {\n          style: Styles.itemContainer,\n          children: [_jsxs(Text, {\n            style: Styles.item,\n            children: [\"- \", item.ingrediente, \" (x gr)\"]\n          }), _jsx(Pressable, {\n            onPress: function onPress() {\n              return handleSelectItem(index);\n            },\n            style: Styles.checkButton,\n            children: showIcon(item.pressed)\n          })]\n        });\n      }\n    }), _jsx(Text, {\n      children: number\n    })]\n  });\n}\nvar Styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#fff',\n    position: 'relative',\n    flex: 1\n  },\n  checkButton: {\n    position: 'absolute',\n    right: 0\n  },\n  item: {\n    fontSize: 35,\n    left: 0\n  },\n  itemContainer: {\n    position: 'relative',\n    marginBottom: 5\n  }\n});","map":{"version":3,"sources":["/home/rubensas/ftp/Hackathon_SEI_22/Frontend/Screens/Ingredients.tsx"],"names":["useRoute","useState","Icon","API","ingredientes","joinIngrediente","ing","nome","quantidade","sistemaNumerico","Ingredients","route","number","params","request_test","get","dados","data","then","totalIngredientes","push","items","setItems","handleSelectItem","selectedItemIndex","old","map","item","index","pressed","showIcon","Styles","container","itemContainer","ingrediente","checkButton","StyleSheet","create","backgroundColor","position","flex","right","fontSize","left","marginBottom"],"mappings":"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","sourcesContent":["\nimport { RouteProp, useNavigation, useRoute } from '@react-navigation/native';\nimport { NativeStackNavigationProp } from '@react-navigation/native-stack';\nimport { useEffect, useState } from 'react';\nimport { Button, FlatList, Pressable, StyleSheet, Text, View } from 'react-native';\nimport { Icon } from 'react-native-elements';\nimport { RootStackParamList } from '../stackParams';\nimport API from '../API/api'\n\nconst ingredientes = [{\n\n    \"ingrediente\": \"ola\",\n    \"pressed\": false\n  },\n  {\n  \n    \"ingrediente\": \"t\",\n    \"pressed\": false\n  }\n  ]\n  \nfunction joinIngrediente(ing) {\n    return {\"ingrediente\": ing.nome + \" \" + ing.quantidade + \" \" + ing.sistemaNumerico, \"pressed\" : false}\n}\n\n\n\n\n\nexport default function Ingredients() {\n    \n    const route = useRoute<RouteProp<RootStackParamList,'Ingredients'>>();\n    const number = route.params.number\n  \n\n    const request_test = async () => {\n        const dados = await API.get(\"/nEmentas?numEmentas=\" + number);  \n        return dados.data;  \n    };\n    //let dadosingredientes = []\n    request_test().then((dados: any) => {\n        for(const ing in dados.totalIngredientes)\n        ingredientes.push(joinIngrediente(ing))\n    });\n\n    const [items, setItems] = useState(ingredientes);\n\n    const handleSelectItem = (selectedItemIndex: Number) =>\n        setItems((old) => {\n            return old.map((item, index) => {\n                if (selectedItemIndex !== index) return item;\n                const pressed = !item.pressed;\n\n                return { ...item, pressed };\n            })\n        })\n\n\n    function showIcon(pressed: boolean) {\n        if (pressed) {\n            return <Icon name=\"checkcircle\" size={40} color=\"black\" type=\"antdesign\" />\n        }\n        else return <Icon name=\"checkcircleo\" size={40} color=\"black\" type=\"antdesign\" />\n    }\n\n\n    return (\n        <View style={Styles.container}>\n            <FlatList data={items}\n                renderItem={({ item, index }) => \n                    <View style={Styles.itemContainer}>\n                        <Text style={Styles.item}>- {item.ingrediente} (x gr)</Text>\n                        <Pressable\n                            onPress={() => handleSelectItem(index)}\n                            style={Styles.checkButton}>{showIcon(item.pressed)}</Pressable> \n                       \n                    </View>}/>\n                <Text>{number}</Text>\n        </View>\n\n    )\n}\n\n\nconst Styles = StyleSheet.create({\n    container: {\n        backgroundColor: '#fff',\n        position: 'relative',\n        flex: 1,\n\n\n    },\n    checkButton: {\n        position: 'absolute',\n        right: 0,\n    },\n    item: {\n        fontSize: 35,\n        left: 0,\n\n    },\n    itemContainer: {\n        position: 'relative',\n        marginBottom: 5,\n    }\n\n\n})\n\n\n\n"]},"metadata":{},"sourceType":"module"}