{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useRoute } from '@react-navigation/native';\nimport { useEffect, useState } from 'react';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Icon } from 'react-native-elements';\nimport API from \"../API/api\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar aux = [];\nexport default function Ingredients() {\n  function joinIngrediente(ing) {\n    return {\n      \"ingrediente\": ing.nome + \" \" + ing.quantidade + \" \" + ing.sistemaNumerico,\n      \"pressed\": false\n    };\n  }\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      items = _useState2[0],\n      setItems = _useState2[1];\n\n  var route = useRoute();\n  var number = route.params.number;\n  useEffect(function () {\n    var request_test = function request_test() {\n      var dados;\n      return _regeneratorRuntime.async(function request_test$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(API.get(\"/nEmentas?numEmentas=\" + number));\n\n            case 2:\n              dados = _context.sent;\n              return _context.abrupt(\"return\", dados.data);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    request_test().then(function _callee(dados) {\n      var i;\n      return _regeneratorRuntime.async(function _callee$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              for (i = 0; i < dados.todosIngredientes.length; i++) {\n                aux.push({\n                  \"ingrediente\": dados.todosIngredientes[i].nome + \" \" + dados.todosIngredientes[i].quantidade + \" \" + dados.todosIngredientes[i].sistemaNumerico,\n                  \"pressed\": false\n                });\n              }\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    });\n  });\n\n  function showIcon(pressed) {\n    if (pressed) {\n      return _jsx(Icon, {\n        name: \"checkcircle\",\n        size: 40,\n        color: \"black\",\n        type: \"antdesign\"\n      });\n    } else return _jsx(Icon, {\n      name: \"checkcircleo\",\n      size: 40,\n      color: \"black\",\n      type: \"antdesign\"\n    });\n  }\n\n  setItems[aux];\n  return _jsxs(View, {\n    style: Styles.container,\n    children: [_jsx(FlatList, {\n      data: items,\n      renderItem: function renderItem(_ref) {\n        var item = _ref.item,\n            index = _ref.index;\n        return _jsxs(View, {\n          style: Styles.itemContainer,\n          children: [_jsxs(Text, {\n            style: Styles.item,\n            children: [\"- \", item.ingrediente, \" (x gr)\"]\n          }), _jsx(Pressable, {\n            onPress: function onPress() {\n              return handleSelectItem(index);\n            },\n            style: Styles.checkButton,\n            children: showIcon(item.pressed)\n          })]\n        });\n      }\n    }), _jsx(Text, {\n      children: number\n    })]\n  });\n}\nvar Styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#fff',\n    position: 'relative',\n    flex: 1\n  },\n  checkButton: {\n    position: 'absolute',\n    right: 0\n  },\n  item: {\n    fontSize: 35,\n    left: 0\n  },\n  itemContainer: {\n    position: 'relative',\n    marginBottom: 5\n  }\n});","map":{"version":3,"sources":["/home/rubensas/ftp/Hackathon_SEI_22/Frontend/Screens/Ingredients.tsx"],"names":["useRoute","useEffect","useState","Icon","API","aux","Ingredients","joinIngrediente","ing","nome","quantidade","sistemaNumerico","items","setItems","route","number","params","request_test","get","dados","data","then","i","todosIngredientes","length","push","showIcon","pressed","Styles","container","item","index","itemContainer","ingrediente","handleSelectItem","checkButton","StyleSheet","create","backgroundColor","position","flex","right","fontSize","left","marginBottom"],"mappings":"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","sourcesContent":["\nimport { RouteProp, useNavigation, useRoute } from '@react-navigation/native';\nimport { NativeStackNavigationProp } from '@react-navigation/native-stack';\nimport { useEffect, useState } from 'react';\nimport { Button, FlatList, Pressable, StyleSheet, Text, View } from 'react-native';\nimport { Icon } from 'react-native-elements';\nimport { RootStackParamList } from '../stackParams';\nimport API from '../API/api'\n\n\nlet aux = []\n\n\n\nexport default function Ingredients() {\n\n    function joinIngrediente(ing) {\n        return { \"ingrediente\": ing.nome + \" \" + ing.quantidade + \" \" + ing.sistemaNumerico, \"pressed\": false }\n    }\n\n    const [items, setItems] = useState([]);\n    const route = useRoute<RouteProp<RootStackParamList,'Ingredients'>>();\n    const number = route.params.number\n  \n    useEffect(() => {\n    const request_test = async () => {\n        const dados = await API.get(\"/nEmentas?numEmentas=\" + number);  \n        return dados.data;  \n    };\n    //let dadosingredientes = []\n        request_test().then(async(dados: any) => {\n            \n            \n        for(var i= 0; i < dados.todosIngredientes.length; i++) {\n            aux.push({ \"ingrediente\": dados.todosIngredientes[i].nome + \" \" + dados.todosIngredientes[i].quantidade + \" \" + dados.todosIngredientes[i].sistemaNumerico, \"pressed\": false })\n    \n\n        }\n        \n    });}\n    ) \n    \n\n    \n\n   \n/*\n    const handleSelectItem = (selectedItemIndex: Number) =>\n        setItems((old) => {\n            return old.map((item, index) => {\n                if (selectedItemIndex !== index) return item;\n                const pressed = !item.pressed;\n\n                return { ...item, pressed };\n            })\n        })\n*/\n\n    function showIcon(pressed: boolean) {\n        if (pressed) {\n            return <Icon name=\"checkcircle\" size={40} color=\"black\" type=\"antdesign\" />\n        }\n        else return <Icon name=\"checkcircleo\" size={40} color=\"black\" type=\"antdesign\" />\n    }\n\n    setItems[aux]\n    return (\n        \n        <View style={Styles.container}>\n            <FlatList data={items}\n                renderItem={({ item, index }) => \n                    <View style={Styles.itemContainer}>\n                        <Text style={Styles.item}>- {item.ingrediente} (x gr)</Text>\n                        <Pressable\n                            onPress={() => handleSelectItem(index)}\n                            style={Styles.checkButton}>{showIcon(item.pressed)}</Pressable> \n                       \n                    </View>}/>\n                <Text>{number}</Text>\n        </View>\n\n    )\n}\n\n\nconst Styles = StyleSheet.create({\n    container: {\n        backgroundColor: '#fff',\n        position: 'relative',\n        flex: 1,\n\n\n    },\n    checkButton: {\n        position: 'absolute',\n        right: 0,\n    },\n    item: {\n        fontSize: 35,\n        left: 0,\n\n    },\n    itemContainer: {\n        position: 'relative',\n        marginBottom: 5,\n    }\n\n\n})\n\n\n\n"]},"metadata":{},"sourceType":"module"}